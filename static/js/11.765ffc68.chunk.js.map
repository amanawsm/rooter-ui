{"version":3,"sources":["containers/Dashboard/Store/index.js","containers/Dashboard/dashboard.js","containers/Dashboard/index.js"],"names":["getEnvironemntInfo","type","GET_ENVIRONMENT_INFO","getDashboradProgramData","param","GET_PROGRAME_DETAIL_INFO","getSelectTabProgramData","GET_PROGRAME_TYPE_DETAIL_INFO","getappdata","GET_APP_LIST_INFO","getAppProgram","GET_APP_PROGRAM_LIST_INFO","Dashboard","props","state","tabId","subTab","activeTab","dashboradTabInfoData","this","user","LoginStore","axios","defaults","headers","common","token","dashboradTabInfo","DashboardStore","id","setState","dashboradInfo","programDetail","phase","TabContainer","Tabs","activeKey","onSelect","map","item","Tab","key","eventKey","title","name","tablist","Table","striped","bordered","hover","applications","app_name","list","index","server","app_type_name","program_name","version_id","version","prevSate","dashboradInfoData","Component","mapDispatchToProps","connect"],"mappings":"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","file":"static/js/11.765ffc68.chunk.js","sourcesContent":["\nimport {\n  GET_ENVIRONMENT_INFO,\n  GET_PROGRAME_DETAIL_INFO,\n  GET_PROGRAME_TYPE_DETAIL_INFO,\n  GET_APP_LIST_INFO,\n  GET_APP_PROGRAM_LIST_INFO\n} from './constant';\n\n/**\n * Get Dashbord info\n */\nexport const getEnvironemntInfo = () => ({\n  type: GET_ENVIRONMENT_INFO,\n});\n\n/**\n * Get Dashbord programe detail\n */\nexport const getDashboradProgramData = (param) => ({\n  type: GET_PROGRAME_DETAIL_INFO, param\n});\n\n/**\n * Get Dashbord programe tpye detail\n */\nexport const getSelectTabProgramData = (param) => ({\n  type: GET_PROGRAME_TYPE_DETAIL_INFO, param\n});\n\n/**\n * Get Dashbord programe tpye detail\n */\nexport const getappdata = (param) => ({\n  type: GET_APP_LIST_INFO, param\n});\n\n/**\n * Get Dashbord programe tpye detail\n */\nexport const getAppProgram = (param) => ({\n  type: GET_APP_PROGRAM_LIST_INFO, param\n});\n\n\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport { TabContainer, Tabs, Tab, Table } from 'react-bootstrap'\n\nclass Dashboard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tabId: 2,\n            subTab: '',\n            activeTab: true,\n            dashboradTabInfoData: []\n        };\n    }\n\n   async componentDidMount() {\n        const { tabId } = this.state\n        const { getEnvironemntInfo,getSelectTabProgramData, LoginStore: {user} } = this.props;\n       axios.defaults.headers.common['Authorization'] = `Bearer ${user && user.token}`;\n      await getEnvironemntInfo()\n      await getSelectTabProgramData({tabId});\n    }\n\n    static getDerivedStateFromProps(props, prevSate) {\n        const { DashboardStore: { dashboradInfo } } = props;\n        const { dashboradInfoData } = prevSate\n      \n        if (dashboradInfo !== dashboradInfoData) {\n            return {\n                dashboradInfoData: dashboradInfo,\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { DashboardStore: { dashboradTabInfo }, getDashboradProgramData  } = this.props\n        const { tabId, activeTab, dashboradTabInfoData } = this.state\n        if( dashboradTabInfo !== dashboradTabInfoData) {\n           if(dashboradTabInfo && dashboradTabInfo[0] && dashboradTabInfo[0].id ) {\n            if(activeTab) {\n                getDashboradProgramData({tabId, subTab: dashboradTabInfo && dashboradTabInfo[0] && dashboradTabInfo[0].id});\n            }\n        }\n            this.setState({\n                dashboradTabInfoData: dashboradTabInfo,\n                subTab: dashboradTabInfo && dashboradTabInfo[0] && dashboradTabInfo[0].id,\n                activeTab : dashboradTabInfo && dashboradTabInfo[0] && dashboradTabInfo[0].id ? false : true\n\n            })\n        }\n    }\n\n\n    render() {\n        const { tabId, subTab } = this.state\n        const { DashboardStore: { dashboradInfo, programDetail, dashboradTabInfo, phase }, getDashboradProgramData, getSelectTabProgramData } = this.props\n        return (\n            <>\n                <TabContainer>\n                    <Tabs id=\"controlled-tab-example\" activeKey={tabId} onSelect={(tabId) => {\n                        this.setState({\n                            tabId\n                        }, () => {\n                            getSelectTabProgramData({tabId});\n\n                        })\n                    }}>\n                        {dashboradInfo && dashboradInfo.map((item) => (\n                            <Tab key={item.id} eventKey={item.id} title={item.name}>\n\n                                <Tabs key={item.id} id=\"controlled-tab-example\" activeKey={subTab} onSelect={(subTab) => {\n                                    this.setState({\n                                        subTab\n                                    }, () => {\n                                        getDashboradProgramData({tabId, subTab});\n                                    })\n                                }}>\n                                    {dashboradTabInfo && dashboradTabInfo.map((tablist) => (\n                                        <Tab key={tablist.id} eventKey={tablist.id} title={tablist.name}>\n                                            <Table striped bordered hover>\n                                                <thead>\n                                                    <tr>\n                                                        <th>SERVER</th>\n                                                        <th>MAIN PROGRAMME</th>\n                                                        <th>PROGRAMME</th>\n                                                        {programDetail && programDetail[0].applications && programDetail[0].applications.map((applications) => (\n                                                            <th key={applications.app_name}>{applications.app_name}</th>\n                                                        ))}\n                                                    </tr>\n                                                </thead>\n                                                <tbody>\n                                                    {programDetail && programDetail.map((list, index) => (\n                                                        <tr key={index}>\n\n                                                                <td> {list.server} </td>\n                                                                <td> {list.app_type_name} </td>\n                                                                <td> {list.program_name} </td>\n                                                               \n\n                                                                {programDetail && programDetail[index].applications && programDetail[index].applications.map((applications) => (\n                                                                    <td key={applications.version_id}>{applications.version}</td>\n                                                                ))}\n\n                                                        </tr>\n                                                    ))}\n                                                </tbody>\n                                            </Table>\n\n                                        </Tab>\n\n                                    ))}\n                                </Tabs>\n                            </Tab>\n                        ))}\n                    </Tabs>\n                </TabContainer>\n            </>\n        );\n    }\n}\n\nexport default Dashboard;\n","import { connect } from 'react-redux';\nimport Dashboard from './dashboard';\nimport { getEnvironemntInfo, getDashboradProgramData, getSelectTabProgramData } from './Store';\n\nconst mapStateToProps = DashboardStore => DashboardStore;\nconst mapDispatchToProps = {\n    getEnvironemntInfo: () => getEnvironemntInfo(),\n    getSelectTabProgramData: (param) => getSelectTabProgramData(param),\n    getDashboradProgramData: (param) => getDashboradProgramData(param),\n\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n"],"sourceRoot":""}